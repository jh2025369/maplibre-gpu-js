import { Properties, DataConstantProperty, DataDrivenProperty, PossiblyEvaluatedPropertyValue } from '../properties';
import type { Color, Formatted, Padding, ResolvedImage, VariableAnchorOffsetCollection } from '@maplibre/maplibre-gl-style-spec';
export type SymbolLayoutProps = {
    "symbol-placement": DataConstantProperty<"point" | "line" | "line-center">;
    "symbol-spacing": DataConstantProperty<number>;
    "symbol-avoid-edges": DataConstantProperty<boolean>;
    "symbol-sort-key": DataDrivenProperty<number>;
    "symbol-z-order": DataConstantProperty<"auto" | "viewport-y" | "source">;
    "icon-allow-overlap": DataConstantProperty<boolean>;
    "icon-overlap": DataConstantProperty<"never" | "always" | "cooperative">;
    "icon-ignore-placement": DataConstantProperty<boolean>;
    "icon-optional": DataConstantProperty<boolean>;
    "icon-rotation-alignment": DataConstantProperty<"map" | "viewport" | "auto">;
    "icon-size": DataDrivenProperty<number>;
    "icon-text-fit": DataConstantProperty<"none" | "width" | "height" | "both">;
    "icon-text-fit-padding": DataConstantProperty<[number, number, number, number]>;
    "icon-image": DataDrivenProperty<ResolvedImage>;
    "icon-rotate": DataDrivenProperty<number>;
    "icon-padding": DataDrivenProperty<Padding>;
    "icon-keep-upright": DataConstantProperty<boolean>;
    "icon-offset": DataDrivenProperty<[number, number]>;
    "icon-anchor": DataDrivenProperty<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
    "icon-pitch-alignment": DataConstantProperty<"map" | "viewport" | "auto">;
    "text-pitch-alignment": DataConstantProperty<"map" | "viewport" | "auto">;
    "text-rotation-alignment": DataConstantProperty<"map" | "viewport" | "viewport-glyph" | "auto">;
    "text-field": DataDrivenProperty<Formatted>;
    "text-font": DataDrivenProperty<Array<string>>;
    "text-size": DataDrivenProperty<number>;
    "text-max-width": DataDrivenProperty<number>;
    "text-line-height": DataConstantProperty<number>;
    "text-letter-spacing": DataDrivenProperty<number>;
    "text-justify": DataDrivenProperty<"auto" | "left" | "center" | "right">;
    "text-radial-offset": DataDrivenProperty<number>;
    "text-variable-anchor": DataConstantProperty<Array<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">>;
    "text-variable-anchor-offset": DataDrivenProperty<VariableAnchorOffsetCollection>;
    "text-anchor": DataDrivenProperty<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
    "text-max-angle": DataConstantProperty<number>;
    "text-writing-mode": DataConstantProperty<Array<"horizontal" | "vertical">>;
    "text-rotate": DataDrivenProperty<number>;
    "text-padding": DataConstantProperty<number>;
    "text-keep-upright": DataConstantProperty<boolean>;
    "text-transform": DataDrivenProperty<"none" | "uppercase" | "lowercase">;
    "text-offset": DataDrivenProperty<[number, number]>;
    "text-allow-overlap": DataConstantProperty<boolean>;
    "text-overlap": DataConstantProperty<"never" | "always" | "cooperative">;
    "text-ignore-placement": DataConstantProperty<boolean>;
    "text-optional": DataConstantProperty<boolean>;
};
export type SymbolLayoutPropsPossiblyEvaluated = {
    "symbol-placement": "point" | "line" | "line-center";
    "symbol-spacing": number;
    "symbol-avoid-edges": boolean;
    "symbol-sort-key": PossiblyEvaluatedPropertyValue<number>;
    "symbol-z-order": "auto" | "viewport-y" | "source";
    "icon-allow-overlap": boolean;
    "icon-overlap": "never" | "always" | "cooperative";
    "icon-ignore-placement": boolean;
    "icon-optional": boolean;
    "icon-rotation-alignment": "map" | "viewport" | "auto";
    "icon-size": PossiblyEvaluatedPropertyValue<number>;
    "icon-text-fit": "none" | "width" | "height" | "both";
    "icon-text-fit-padding": [number, number, number, number];
    "icon-image": PossiblyEvaluatedPropertyValue<ResolvedImage>;
    "icon-rotate": PossiblyEvaluatedPropertyValue<number>;
    "icon-padding": PossiblyEvaluatedPropertyValue<Padding>;
    "icon-keep-upright": boolean;
    "icon-offset": PossiblyEvaluatedPropertyValue<[number, number]>;
    "icon-anchor": PossiblyEvaluatedPropertyValue<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
    "icon-pitch-alignment": "map" | "viewport" | "auto";
    "text-pitch-alignment": "map" | "viewport" | "auto";
    "text-rotation-alignment": "map" | "viewport" | "viewport-glyph" | "auto";
    "text-field": PossiblyEvaluatedPropertyValue<Formatted>;
    "text-font": PossiblyEvaluatedPropertyValue<Array<string>>;
    "text-size": PossiblyEvaluatedPropertyValue<number>;
    "text-max-width": PossiblyEvaluatedPropertyValue<number>;
    "text-line-height": number;
    "text-letter-spacing": PossiblyEvaluatedPropertyValue<number>;
    "text-justify": PossiblyEvaluatedPropertyValue<"auto" | "left" | "center" | "right">;
    "text-radial-offset": PossiblyEvaluatedPropertyValue<number>;
    "text-variable-anchor": Array<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
    "text-variable-anchor-offset": PossiblyEvaluatedPropertyValue<VariableAnchorOffsetCollection>;
    "text-anchor": PossiblyEvaluatedPropertyValue<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
    "text-max-angle": number;
    "text-writing-mode": Array<"horizontal" | "vertical">;
    "text-rotate": PossiblyEvaluatedPropertyValue<number>;
    "text-padding": number;
    "text-keep-upright": boolean;
    "text-transform": PossiblyEvaluatedPropertyValue<"none" | "uppercase" | "lowercase">;
    "text-offset": PossiblyEvaluatedPropertyValue<[number, number]>;
    "text-allow-overlap": boolean;
    "text-overlap": "never" | "always" | "cooperative";
    "text-ignore-placement": boolean;
    "text-optional": boolean;
};
export type SymbolPaintProps = {
    "icon-opacity": DataDrivenProperty<number>;
    "icon-color": DataDrivenProperty<Color>;
    "icon-halo-color": DataDrivenProperty<Color>;
    "icon-halo-width": DataDrivenProperty<number>;
    "icon-halo-blur": DataDrivenProperty<number>;
    "icon-translate": DataConstantProperty<[number, number]>;
    "icon-translate-anchor": DataConstantProperty<"map" | "viewport">;
    "text-opacity": DataDrivenProperty<number>;
    "text-color": DataDrivenProperty<Color>;
    "text-halo-color": DataDrivenProperty<Color>;
    "text-halo-width": DataDrivenProperty<number>;
    "text-halo-blur": DataDrivenProperty<number>;
    "text-translate": DataConstantProperty<[number, number]>;
    "text-translate-anchor": DataConstantProperty<"map" | "viewport">;
};
export type SymbolPaintPropsPossiblyEvaluated = {
    "icon-opacity": PossiblyEvaluatedPropertyValue<number>;
    "icon-color": PossiblyEvaluatedPropertyValue<Color>;
    "icon-halo-color": PossiblyEvaluatedPropertyValue<Color>;
    "icon-halo-width": PossiblyEvaluatedPropertyValue<number>;
    "icon-halo-blur": PossiblyEvaluatedPropertyValue<number>;
    "icon-translate": [number, number];
    "icon-translate-anchor": "map" | "viewport";
    "text-opacity": PossiblyEvaluatedPropertyValue<number>;
    "text-color": PossiblyEvaluatedPropertyValue<Color>;
    "text-halo-color": PossiblyEvaluatedPropertyValue<Color>;
    "text-halo-width": PossiblyEvaluatedPropertyValue<number>;
    "text-halo-blur": PossiblyEvaluatedPropertyValue<number>;
    "text-translate": [number, number];
    "text-translate-anchor": "map" | "viewport";
};
declare const _default: {
    readonly paint: Properties<SymbolPaintProps>;
    readonly layout: Properties<SymbolLayoutProps>;
};
export default _default;
